#include <iostream>
#include <string.h>
using namespace std;
/*
Легенда
Вы с друзьями решили написать игру(очередную, зато свою!), в которой
партия героев ходит по волшебному миру и ищет приключений на свою
голову.Писать придётся много, так что задачи сразу поделили между
участниками разработки.Вам досталось писать героев - приключенцев - классы,
расы и всё такое.Как это принято во "взрослой" разработке, вы сразу договорились
между собой про интерфейсы между компонентами(детали ниже, в постановке задачи).
Теперь нужно реализовывать свою часть, аккуратно соблюдая интерфейсы, которые от
вас ожидают ваши друзья. (Очень аккуратно!Не забывайте - они знают, где вы живёте!)

На данный момент все сущности у вас в игре ну очень базовые - разработка у вас устроена
по agile - у, так что сейчас нужно зарелизить версию 0.1,
которая ещё ничего не будет уметь, но уже будет запускаться.

Постановка задачи
Вы договорились, что для версии 0.1 предметы в инвентаре описываются вот так :
*/
class Item {
public:
    // Так можно создать предмет, указав его название, вес, уровень и магичность
    Item(string title, int weight, int level, bool magical);
    // Получить вес предмета
    int getWeight();
    // Получить уровень предмета
    int getLevel();
    // Получить, является ли предмет магичным
    int isMagical();
};
//Сами предметы пишет ваш коллега.Вы ничего не знаете, о том, как они будут
//устроены внутри.Но точно знаете, что ваш код должен с ними общаться через ровно эти методы.
class Player {
protected:
    // Сила и уровень героя
    int strength;
    int level;
public:
    // Создать героя, все подробности будут указаны позже
    Player() { }
    // Удалить героя, ничего умного эта процедура пока что не требует
    virtual ~Player() { }

    // Базовые методы, пока что очень простые.
    // На данном этапе можно считать, что для всех героев они ведут себя одинаково, 
    // так что пусть будут в базовом классе.

    // Задать силу
    void setStrength(int strength) {
        this->strength = strength;
    }
    // Задать уровень
    void setLevel(int level) {
        this->level = level;
    }

    // Получить силу
    int getStrength() {
        return this->strength;
    }
    // Получить уровень
    int getLevel() {
        return this->level;
    }

    // Проверка, может ли игрок использовать предмет
    virtual bool canUse(Item* item) = 0;
};

class Knight : public Player
{
public:
    bool canUse(Item* item) override;
};
class Wizard : public Player
{
public:
    bool canUse(Item* item) override;
};

bool Knight::canUse(Item* item)
{
    return !item->isMagical() && strength >= item->getWeight() && level >= item->getLevel();
}

bool Wizard::canUse(Item* item)
{
    return strength >= item->getWeight() && level >= item->getLevel();
}